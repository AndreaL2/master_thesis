class(TxDb.Hsapiens.UCSC.hg38.knownGene)
obmaf$pvalue
padj2 <- padj<=0.05
obmaf$padj <- padj<=0.05
obmaf
obmaf.05<-obmaf[obmaf$padj==TRUE]
obmaf.05
obmaf.01<-obmaf[obmaf$padj2==TRUE]
obmaf.01
obmaf$padj2 <- padj<=0.02
obmaf.01<-obmaf[obmaf$padj2==TRUE]
obmaf.01
obmaf.05
min(padj)
obmaf$padj2 <- padj<=0.01
padj <- p.adjust(obmaf$pvalue, method = "fdr")
obmaf$padj <- padj<=0.05
obmaf$padj2 <- padj<=0.01
obmaf
length(obmaf$padj2==TRUE)
length(obmaf[obmaf$padj2==TRUE])
obmaf.01<-obmaf[obmaf$padj2==TRUE]
obmaf.01
load("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/obesity_maf.rda")
padj <- p.adjust(obmaf$pvalue, method = "fdr")
obmaf$Padj.fdr <- padj
obmaf
obmaf$padj <- padj<=0.05
obmaf$padj2 <- padj<=0.01
obmaf.05<-obmaf[obmaf$padj==TRUE]
obmaf.01<-obmaf[obmaf$padj2==TRUE]
obmaf.05
obmaf.01
obmaf.05$padj & obmaf.05$padj2 <- NULL
obmaf.05$padj<- NULL; obmaf.05$padj2 <- NULL
obmaf.05
obmaf.01$padj2<- NULL; obmaf.01$padj1 <- NULL
obmaf.01
columns(txdb)
txdb["GENEID"]
GR <- transcripts(txdb)
GR
GRList <- transcriptsBy(txdb, by = "gene")
GRList
library(Homo.sapiens)
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
Homo.sapiens
Homo.sapiens[Txdb]
columns(Homo.sapiens)
cls <- columns(Homo.sapiens)
cls
cls <- cls[c(1,19,45)]
kts <- keytypes(Homo.sapiens)
kt <- kts[2]
kts
ks <- head(keys(Homo.sapiens, keytype=kts[2]))
ks
res <- select(Homo.sapiens, keys=ks, columns=cls, keytype=kt)
head(res)
gns <- genomicRanges(Homo.sapiens, column="SYMBOL")
gns <- GRanges(Homo.sapiens, column="SYMBOL")
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementLengths(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
library(GenomicScores)
library(GenomicRanges)
geneRanges <-
function(db, column="ENTREZID")
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementLengths(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
gns
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementLengths(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
gns
library(Homo.sapiens)
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementLengths(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
gns
columns(txdb)
library(AnnotationDbi)
rownames(obmaf)
obmaf
ranges(obmaf)
Homo.sapiens
genes<- select(Homo.sapiens, keys=ranges(obmaf.01),
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
genes
ranges(obmaf.01)
library(org.Hs.eg.db)
genes<- select(org.Hs.eg.db, keys=ranges(obmaf.01),
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
genes<- select(org.Hs.eg.db, keys=ranges(obmaf.01)[1],
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
keys=ranges(obmaf.01)[1]
ranges(obmaf.01)[1]
ranges(obmaf.01)[,1]
obmaf.01
obmaf.01$padj2<- NULL; obmaf.01$padj <- NULL
ranges(obamf)
ranges(obamaf)
ranges(obmaf)
ranges(obmaf)["start"]
ranges(obmaf)[[1]]
ranges(unlist(obmaf))[[1]]
ranges(obmaf)[,2]
genes<- select(org.Hs.eg.db, keys=as.vector(unlist(ranges(obmaf.01))),
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
genes<- select(org.Hs.eg.db, keys=as.vector((ranges(obmaf.01))),
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
genes<- select(org.Hs.eg.db, keys=as.vector(ranges(obmaf.01)),
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
relist(ranges(obmaf))
extractList(ranges(obmaf))
genes<- select(org.Hs.eg.db, keys=as.vector(ranges(obmaf.01)),
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
obmaf
extractList(seqnames(obmaf),ranges(obmaf))
extractList(strand(obmaf),ranges(obmaf))
as.data.frame(ranges(obmaf.01))
as.data.frame(ranges(obmaf.01))[1]
as.vector(as.data.frame(ranges(obmaf.01))[1])
columns(txdb)
gene<- transcriptsBy(txdb, "gene")
gene
library(biomaRt)
listMarts()
mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
start(obmaf)
regions
regions <- paste(seqnames(obmaf.05), start(obmaf.05), end(obmaf.05), sep=":")
regions
results <- getBM(attributes = c("hgnc_symbol", "chromosome_name",
"start_position", "end_position"),
filters = c("chromosomal_region"),
values=regions,
mart=mart)
results
length(results)
nrow(results)
length(obmaf.05)
View(results)
class(results)
gn <- makeGRangesFromDataFrame(results, seqnames.field="chromosome_name", start.field ="start_position", end.field="end_position", ignore.strand = TRUE)
gn
mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl Human genes")
mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
gn
gn$SYMBOL <- results$hgnc_symbol
gn
symInCnv <- splitByOverlap(gn, obmaf.01, "SYMBOL")
library(GenomicRanges)
symInCnv <- splitByOverlap(gn, obmaf.01, "SYMBOL")
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
gns
lenght(gns)
length(gns)
gns <- geneRanges(org.Hs.eg.db, column="SYMBOL")
gns <- geneRanges(Homo.sapiens, column="SYMBOL")
###Creation of Homo.sapiens object for hg38 genome
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(OrganismDbi)
gd <- list(join1 = c(GO.db="GOID", org.Hs.eg.db="GO"),
join2 = c(org.Hs.eg.db = "ENTREZID",
TxDb.Hsapiens.UCSC.hg38.knownGene = "GENEID"))
destination <- tempfile()
dir.create(destination)
makeOrganismPackage(pkgname = "Homo.sapiens.hg38", graphData = gd,
organism = "Homo sapiens", version = "1.0.0",
maintainer = "Maintainer<maintainer@email>",
author = "Author Name", destDir = destination,
license = "Artistic-2.0")
install.packages(destination, repos = NULL, type="source")
library(Homo.sapiens.hg38)
install.packages(destination, repos = NULL, type="source")
install.packages("C:\Users\salta\AppData\Local\Temp\RtmpAjqWk5\file800852ab2e7c/Homo.sapiens.hg38" , repos = NULL, type="source")
install.packages("C:\\Users\\salta\\AppData\\Local\\Temp\\RtmpAjqWk5\\file800852ab2e7c/Homo.sapiens.hg38" , repos = NULL, type="source")
library(Homo.sapiens.hg38)
install.packages(sprintf("%s/Homo.sapiens.hg38",destination), repos = NULL, type="source")
library(Homo.sapiens.hg38)
geneRanges <-
function(db, column="ENTREZID")
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
length(gns)
Homo.sapiens.hg38
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
length(gns)
gns
Homo.sapiens
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
length(gns)
symInCnv = splitByOverlap(gns, obmaf.01, "SYMBOL")
symInCnv = splitColumnByOverlap(gns, obmaf.01, "SYMBOL")
symInCnv
seqlevels(gns)
seqlevels(obmaf.01)
seqlevelsStyle(obmaf.01)
seqlevelsStyle(gns)
seqlevelsStyle(obmaf.01)<-seqlevelsStyle(gns)
symInCnv = splitColumnByOverlap(gns, obmaf.01, "SYMBOL")
genome(obmaf.01)
genome(obmaf.01)<-genome(gns)
symInCnv = splitColumnByOverlap(gns, obmaf.01, "SYMBOL")
symInCnv
symInCnv
obmaf.01
as.vector(symInCnv)
as.vector(unstrsplit(symInCnv, sep=", "))
as.vector(unstrsplit(symInCnv, sep=","))
obmaf.01$GENE <- geneNames
geneNames<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.01$GENE <- geneNames
obmaf.01
obmaf.01[7]
mcols(obmaf.01)[7]
name(mcols(obmaf.01)[7])
seqname(mcols(obmaf.01)[7])
seqlevels(mcols(obmaf.01)[7])
seqlevels(mcols(obmaf.01)[7])<-"GENES"
##Merging genes positions with SNPs' genomics positions
seqlevelsStyle(obmaf.01)<-seqlevelsStyle(gns); seqlevelsStyle(obmaf.05)<-seqlevelsStyle(gns)
genome(obmaf.01)<-genome(gns); genome(obmaf.05)<-genome(gns)
###Obmaf.05
symInCnv = splitColumnByOverlap(gns, obmaf.05, "SYMBOL")
geneNames<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.01$GENES <- geneNames
obmaf.05$GENES <- geneNames
###Obmaf.01
symInCnv = splitColumnByOverlap(gns, obmaf.01, "SYMBOL")
geneNames<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.01$GENES <- geneNames
###Obmaf.01
symInCnv = splitColumnByOverlap(gns, obmaf.01, "SYMBOL")
geneNames.01<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.01$GENES <- geneNames.01
###Obmaf.05
symInCnv = splitColumnByOverlap(gns, obmaf.05, "SYMBOL")
geneNames.05<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.05$GENES <- geneNames.05
gene<- transcriptsBy(txdb, "gene")
obmaf.01
obmaf.05
obmaf.01
obmaf.01$GENE<-NULL
obmaf.01
obmaf.05
obmas.05$GENES
obmaf.05$GENES
obmaf.01$GENES
length(obmaf.05[obmaf.05$GENE==""])
nrow(is.na(obmaf.05[obmaf.05$GENE]))
is.na(obmaf.05[obmaf.05$GENE])
length(obmaf.05[obmaf.05$GENE])
length(obmaf.05[obmaf.05$GENE=="*"])
length(obmaf.05[obmaf.05$GENES==""])
length(obmaf.01[obmaf.05$GENES==""])
length(obmaf.01[obmaf.01$GENES==""])
length(obmaf.01)-length(obmaf.01[obmaf.01$GENES==""])
length(obmaf.05)-length(obmaf.01[obmaf.05$GENES==""])
length(obmaf.05)-length(obmaf.05[obmaf.05$GENES==""])
setwd("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/MafAnalysis")
save(list=obmaf.01, file=sprintf("%s.rda", obmaf.01))
save(obmaf.01, file=sprintf("%s.rda", obmaf.01))
save(obmaf.01, file="obmaf.01.rda")
save(obmaf.05, file="obmaf.05.rda")
length(obmaf.01)
length(obmaf.05)
setwd("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/bibliography")
setwd("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/bibliography")
setwd("~/")
setwd("~/GitHub/master_thesis/obesitySeq")
install.packages("bookdown")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache=TRUE)
head(var)
head(var)
var <- read.table(file="Variants.table", sep="", dec= ".", header = TRUE )
setwd("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC")
var <- read.table(file="Variants.table", sep="", dec= ".", header = TRUE )
setwd("~/GitHub/master_thesis/obesitySeq")
head(var)
var <- read.table(file="Data\Variants.table", sep="", dec= ".", header = TRUE )
var <- read.table(file="Data/Variants.table", sep="", dec= ".", header = TRUE )
head(var)
obmaf
obmaf[1:5]
obmaf[,1:5]
obmaf[,1;3]
obmaf[,1,3]
obmaf[,1&3]
obmaf[,1 & 3]
obmaf[,3]
obmaf[,1+3]
obmaf[,1 AND 3]
obmaf[,1\3]
obmaf[,1/3]
obmaf[,c(1,3)]
head(obmaf[,c(1,3)])
load("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/maf_variants.rda")
gr
head(gr)
gr[,3]<-gr[,1]
gr[,1]
gr
gr$N_ob2 <- gr$N_ob
gr
gr$N_ob<-NULL
gr
seqnames(gr[,2])
names(gr[,2])
levels(gr[,2])
mcols(obmaf)[,2]
names(mcols(obmaf)[,2])
seqnames(mcols(obmaf)[,2])
seqlevels(mcols(obmaf)[,2])
gr$N_ob<-gr$N_ob2
gr
gr$N_ob2<-NULL
gr
head(gr)
obmaf
head(obmaf[,c(1,3,2)])
obmaf
head(obmaf[,1-5])
gr
head(gr)
load(file = "DATA/maf_variants.rda")
load(file = "Data/maf_variants.rda")
load(file = "Data/maf_variants.rda")
setwd("~/GitHub/master_thesis/obesitySeq")
load(file = "Data/maf_variants.rda")
load(file = "Data/maf_variants.rda")
head(gr)
obmaf
save(obmaf[,1-5],file = "obmaf.rda")
save(obmaf[,1:5],file = "Data/obmaf.rda")
obmaf[,1:5]
save((obmaf[,1:5]),file = "Data/obmaf.rda")
obemaf<-obmaf[,1:5]
save(obemaf,file = "Data/obmaf.rda")
obemaf
head(gr)
head(obemaf[,1:3])
head(obemaf[,1-5])
obemaf
obmaf.01
head(obmaf.05)
length(obmaf.05)
head(obmaf.01)
length(obmaf.01)
#Variants with a fdr lower than 5%
head(obmaf.05)
#Total number of variants fdr<0.05
length(obmaf.05)
#Variants with a fdr lower than 1%
head(obmaf.01)
#Total number of variants fdr<0.01
length(obmaf.01)
obmaf.01
obmaf
load("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/obmaf.01.rda")
load("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/obmaf.05.rda")
library(Homo.sapiens.hg38)
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
##Merging genes positions with SNPs' genomics positions
seqlevelsStyle(obmaf.01)<-seqlevelsStyle(gns); seqlevelsStyle(obmaf.05)<-seqlevelsStyle(gns)
genome(obmaf.01)<-genome(gns); genome(obmaf.05)<-genome(gns)
###Obmaf.01
symInCnv = splitColumnByOverlap(gns, obmaf.01, "SYMBOL")
geneNames.01<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.01$GENES <- geneNames.01
###Obmaf.05
symInCnv = splitColumnByOverlap(gns, obmaf.05, "SYMBOL")
geneNames.05<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf.05$GENES <- geneNames.05
obmaf.05
obmaf.01
save(obmaf.01, file="obmaf.01.rda")
save(obmaf.05, file="obmaf.05.rda")
