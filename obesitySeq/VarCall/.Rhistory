library(EnsDb.Hsapiens.v86)
library(GOstats)
install.packages("RBGL")
library(GOstats)
BiocManager::install("RBGL")
library(GOstats)
load("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/MafAnalysis/obesity_maf.rda")
load("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/MafAnalysis/obmaf.01.rda")
#Genes Obmaf
geneRanges <-
function(db, column="ENTREZID")
#Genes Obmaf
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
seqlevelsStyle(obmaf)<-seqlevelsStyle(gns)
library(Hsapiens.hg38)
library(Homo.sapiens.hg38)
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
seqlevelsStyle(obmaf)<-seqlevelsStyle(gns)
gns
seqlevelsStyle(gns)
library(MafDb.1Kgenomes.phase3.GRCh38)
library(GenomicScores)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
install.packages("shiny")
library(MafDb.1Kgenomes.phase3.GRCh38)
library(GenomicScores)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(GenomicRanges)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(OrganismDbi)
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
seqlevelsStyle(obmaf)<-seqlevelsStyle(gns)
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
geneRanges <-
function(db, column="ENTREZID")
{
g <- genes(db, columns=column)
col <- mcols(g)[[column]]
genes <- granges(g)[rep(seq_along(g), elementNROWS(col))]
mcols(genes)[[column]] <- as.character(unlist(col))
genes
}
splitColumnByOverlap <-
function(query, subject, column="ENTREZID", ...)
{
olaps <- findOverlaps(query, subject, ...)
f1 <- factor(subjectHits(olaps),
levels=seq_len(subjectLength(olaps)))
splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}
gns <- geneRanges(Homo.sapiens.hg38, column="SYMBOL")
seqlevelsStyle(obmaf)<-seqlevelsStyle(gns)
genome(obmaf)<-genome(gns)
symInCnv = splitColumnByOverlap(gns, obmaf, "SYMBOL")
geneNames<-as.vector(unstrsplit(symInCnv, sep=", "))
obmaf$GENES <- geneNames
edb <- EnsDb.Hsapiens.v86
length(obmaf.01)-length(obmaf.01[obmaf.01$GENES==""])
EnGenes <- genes(edb, filter= GeneNameFilter(obmaf.01$GENES))
EnGenesAll <- genes(edb, filter= GeneNameFilter(obmaf$GENES))
##GO
params <- new("GOHyperGParams", geneIds=EnGenes$gene_id,
universeGeneIds=EnGenesAll$gene_id,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05	, conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
EnGenes$gene_id
EnGenesAll$gene_id
hgOver <- hyperGTest(params)
#Enrichment procedure via hypergeometric test
deGenes_1 <-  grep("ENSG", EnGenes$gene_id, value=TRUE)
deGenes_1
geneUniverse <-  grep("ENSG", EnGenesAll$gene_id, value=TRUE)
##GO
params <- new("GOHyperGParams", geneIds=deGenes_1,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05	, conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
##GO
params <- new("GOHyperGParams", geneIds=unlist(deGenes_1),
universeGeneIds=unlist(geneUniverse),
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05	, conditional=FALSE,
testDirection="over")
unlist(deGenes_1)
hgOver <- hyperGTest(params)
deGenes_1 <- unlist(mget(EnGenes$gene_id, envir=org.Hs.egENSEMBL2EG,ifnotfound = NA))
deGenes_1
#Enrichment procedure via hypergeometric test
deGenes_1 <- unlist(mget(EnGenes$gene_id, envir=org.Hs.egENSEMBL2EG,ifnotfound = NA))
geneUniverse <- unlist(mget(EnGenesAll$gene_id, envir=org.Hs.egENSEMBL2EG, ifnotfound = NA))
##GO
params <- new("GOHyperGParams", geneIds=unlist(deGenes_1),
universeGeneIds=unlist(geneUniverse),
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05	, conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
hgOver
head(summary(hgOver))
summary(hgOver)
library(KEGG.db)
library("KEGGREST")
KEGGREST
params.kegg <- new("KEGGHyperGParams", geneIds=deGenes_1,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.05,
testDirection="over")
hgOver.kegg <- hyperGTest(params.kegg)
summary(hgOver.kegg)
EnGenesAll
EnGenes
obmaf
obmaf<-obmaf[obmaf$GENES!=""]
obmaf
edb <- EnsDb.Hsapiens.v86
length(obmaf.01)-length(obmaf.01[obmaf.01$GENES==""])
EnGenesAll <- genes(edb, filter= GeneNameFilter(obmaf$GENES))
EnGenesAll
obmaf.01
EnGenes
t <- split(obmaf.01$GENES, "[,]")
t
t <- split(obmaf.01$GENES, ",")
t
obmaf.01[obmaf.01$GENES!=""]
obmaf.01<-obmaf.01[obmaf.01$GENES!=""]
t <- split(obmaf.01$GENES, ",")
t
obmaf.01$GENES
t
t <- split(obmaf.01$GENES[561], ",")
t
obmaf.01$GENES
obmaf.01
genes(edb, filter= GeneNameFilter("CENPS-CORT, CORT")
)
genes(edb, filter= GeneNameFilter("CENPS-CORT"))
genes(edb, filter= GeneNameFilter("CORT"))
EnGenes
obmaf.01$GENES
t <- strsplit(obmaf.01$GENES[561], "[[,]]")
t
t <- strsplit(obmaf.01$GENES[561], "[[[,]]]")
t
t <- strsplit(obmaf.01$GENES[561], "[,]")
t
t <- strsplit(obmaf.01$GENES[561], "[ ,]")
t
t <- strsplit(obmaf.01$GENES, "[ ,]")
t
t2<-c(t)
t2
t2<-list(t)
t2
t2<- grep("*",t)
t2
t2<- grep("[:alnum:]",t)
t2<- grep([:alnum:],t)
t2<- grep("([:alnum:]+)",t)
t2<- grep("(//w+)",t)
t2<- grep("//w+",t)
t2<- grep("\\w+",t)
t2
t2<- grep("\\w+",t, value = TRUE)
t2
t2<- grep("\w+",t, value = TRUE)
t2<- grep("*",t, value = TRUE)
t2
t <- strsplit(obmaf.01$GENES, "[,]")
t2<- grep("*",t, value = TRUE)
t2
class(t)
t[575]
unlist(t[575])
class(unlist(t[575]))
EnGenes <- genes(edb, filter= GeneNameFilter(t2))
EnGenes
obmaf.01$GENES
t <- gsub(",","\t",obmaf.01$GENES)
t
t <- gsub(" ,","\\t",obmaf.01$GENES)
t
t <- gsub(" ,","\\n",obmaf.01$GENES)
t
t <- gsub(" ,","\n",obmaf.01$GENES)
t
t[555]
t <- gsub(" ,","\n",obmaf.01$GENES)
t
t <- gsub(" ,","\n",unlist(obmaf.01$GENES))
t
class(t)
EnGenes <- genes(edb, filter= GeneNameFilter(t))
EnGenes
t
n=0
t2
length(t[575])
nrow(t[575])
t[575]
length(t[575])
length(t2[575])
t2
t <- gsub(" ,","\n",unlist(obmaf.01$GENES))
t2<- grep("*",t, value = TRUE)
t2
length(unlist(t[561]))
unlist(t[561])
nrow(unlist(t[561]))
ncol(unlist(t[561]))
ncol(as.dataframe(unlist(t[561])))
ncol(as.data.frame(unlist(t[561])))
as.data.frame(unlist(t[561]))
length(as.data.frame(unlist(t[561])))
length(as.data.frame((t[561])))
length(as.data.frame((t2[561])))
t2
t <- gsub(" ,","\"\n",unlist(obmaf.01$GENES))
t
t <- gsub("\"\n",",",unlist(obmaf.01$GENES))
t
t <- strsplit(unlist(obmaf.01$GENES),"[,]")
t
length(t[575])
ncol(t[575])
nrow(t[575])
width(t[575])
length(t[[575])
length(t[[575]])
t2<- grep("*",t, value = TRUE)
t2
t2<- grep("*",unlist(t), value = TRUE)
t2
t2<-gsub(" ","", t2)
t2
##obmaf
obmaf
##obmaf
k <- strsplit(unlist(obmaf$GENES),"[,]")
k2<- grep("*",unlist(k), value = TRUE)
k2<-gsub(" ","", k2)
EnGenes <- genes(edb, filter= GeneNameFilter(t2))
EnGenesAll <- genes(edb, filter= GeneNameFilter(k2))
EnGenes
k2
EnGenesAll
EnGenes
obmaf.01$GENES
genes(edb, filter= GeneNameFilter(CRYAA2))
genes(edb, filter= GeneNameFilter("CRYAA2"))
genes(edb, filter= GeneNameFilter("CRYAA"))
t2
for (i in t2){
print genes(edb, filter=GenenameFilter(i))
}
for (i in t2){
print(genes(edb, filter=GenenameFilter(i)))
}
as.vector(t2)
EnGenes <- genes(edb, filter= GeneNameFilter(as.vector(t2)))
EnGenes
EnGenesAll
#Enrichment procedure via hypergeometric test
deGenes_1 <- unlist(mget(EnGenes$gene_id, envir=org.Hs.egENSEMBL2EG,ifnotfound = NA))
geneUniverse <- unlist(mget(EnGenesAll$gene_id, envir=org.Hs.egENSEMBL2EG, ifnotfound = NA))
##GO
params <- new("GOHyperGParams", geneIds=deGenes_1,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05	, conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
hgOver
head(summary(hgOver))
library(KEGG.db)
params.kegg <- new("KEGGHyperGParams", geneIds=deGenes_1,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.05,
testDirection="over")
hgOver.kegg <- hyperGTest(params.kegg)
summary(hgOver.kegg)
summary(hgOver)
table <- read.table("D:\Downloads\igsr_IBS_undefined.tsv.tsv", sep="\t")
table <- read.table("D:Downloads\igsr_IBS_undefined.tsv.tsv", sep="\t")
table <- read.table("D:\\Downloads\\igsr_IBS_undefined.tsv.tsv", sep="\t")
table
head(table)
k <- table$V6
k
class(k)
print(k)
write(k, file="D\\samples.txt")
write(k, file="D:\\samples.txt")
write(as.list(k), file="D:\\samples.txt", sep = ",")
write(as.character(k), file="D:\\samples.txt", sep = ",")
write(as.character(k), file="D:\\samples.txt", sep = ",")
head(summary(hgOver))
library(SNPlocs.Hsapiens.dbSNP151.GRCh38)
BiocManager::install("SNPlocs.Hsapiens.dbSNP151.GRCh38")
library(SNPlocs.Hsapiens.dbSNP151.GRCh38)
obmaf.01
snps
snps<-SNPlocs.Hsapiens.dbSNP151.GRCh38
snps
VCF_snps <- snpsByOverlaps(snps, obmaf.01, columns=c("RefSNP_id", "alleles"))
seqlevels(obmaf.01)
seqlevelsStyle(obmaf.01) <- seqlevelsStyle(snps)
genome(obmaf.01)
genome(snps)
seqlevelsStyle(snps)
seqlevelsStyle(obmaf.01)
genome(obmaf.01) <- genome(snps)
VCF_snps <- snpsByOverlaps(snps, obmaf.01, columns=c("RefSNP_id", "alleles"))
ranges(obmaf.01)
VCF_snps <- snpsByOverlaps(snps, ranges(obmaf.01), columns=c("RefSNP_id", "alleles"))
VCF_snps <- snpsByOverlaps(snps, obmaf.01, columns=c("RefSNP_id", "alleles"))
VCF_snps <- snpsByOverlaps(snps, obmaf.01, columns=c("RefSNP_id"))
obmaf.01
hgOver
head(summary(hgOver))
setwd("~/Master/Bioinformatics/Module 7 - Master Thesis/SNPCallHC/Enrichment")
save(hgOver, file="EnrichmentGO.rda")
summary(hgOver)
##GO
params <- new("GOHyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.01	, conditional=FALSE,
testDirection="over")
#Enrichment procedure via hypergeometric test
Genes_01 <- unlist(mget(EnGenes$gene_id, envir=org.Hs.egENSEMBL2EG,ifnotfound = NA))
geneUniverse <- unlist(mget(EnGenesAll$gene_id, envir=org.Hs.egENSEMBL2EG, ifnotfound = NA))
##GO
params <- new("GOHyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.01	, conditional=FALSE,
testDirection="over")
hgOver <- hyperGTest(params)
hgOver
head(summary(hgOver))
summary(hgOver)
save(hgOver, file="EnrichmentGO.rda")
library(KEGG.db)
params.kegg <- new("KEGGHyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over")
hgOver.kegg <- hyperGTest(params.kegg)
summary(hgOver.kegg)
hgOver.kegg
Genes_01
hgOver
head(summary(hgOver))
library(KEGG.db)
summary(hgOver.kegg)
params.kegg <- new("KEGGHyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.05,
testDirection="over")
hgOver.kegg <- hyperGTest(params.kegg)
summary(hgOver.kegg)
params.kegg <- new("KEGGHyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over")
hgOver.kegg <- hyperGTest(params.kegg)
summary(hgOver.kegg)
save(hgOver.kegg, file="EnrichmentKEGG.rda")
head(summary(hgOver))
VCF_snps <- snpsByOverlaps(snps, obmaf.01)
hgOver.kegg
summary(hgOver.kegg)
library(GO.db)
library(EnsDb.Hsapiens.v86)
library(org.Hs.egENSEMBL2EG)
library(GOstats)
setwd("~/GitHub/master_thesis/obesitySeq/Data")
load("~/GitHub/master_thesis/obesitySeq/Data/obmaf.rda")
setwd("~/GitHub/master_thesis/obesitySeq")
obmaf.01
library(XtraSNPlocs.Hsapiens.dbSNP141.GRCh38)
BiocManager::install("XtraSNPlocs.Hsapiens.dbSNP151.GRCh38")
BiocManager::install("XtraSNPlocs.Hsapiens.dbSNP151.GRCh38")
BiocManager::install("XtraSNPlocs.Hsapiens.dbSNP141.GRCh38")
library(XtraSNPlocs.Hsapiens.dbSNP141.GRCh38)
VCF_snps <- snpsByOverlaps(snps, obmaf.01, columns=c("RefSNP_id", "GENES", "pvalue", "Padj.fdr"))
BiocManager::install("reactome.db")
library(reactome.db)
params.kegg <- new("reactomeyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over")
params.kegg <- new("reactomeHyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over")
params.reactome <- new("reactomeGO2REACTOMEID", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over")
reactome
GO
params.reactome <- new("reactome", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over")
params.reactome <- new("HyperGParam", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
ontology=reactome)
params.reactome <- new("HyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
ontology=reactome)
params.reactome <- new("HyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
ontology(reactome))
params.reactome <- new("HyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
categoryName("reactome"))
params.reactome <- new("HyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
categoryName(reactome))
params.reactome <- new(p="HyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
categoryName(reactome))
params.reactome <- new("HyperGTest", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
categoryName(reactome))
params.reactome <- new("HyperGParams", geneIds=Genes_01,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01,
testDirection="over",
categoryName(reactome))
params.reactome <- new("HyperGParams", geneIds(Genes_01),
universeGeneIds(geneUniverse),
annotation("org.Hs.eg.db"),
pvalueCutoff=0.01,
testDirection="over",
categoryName(reactome))
